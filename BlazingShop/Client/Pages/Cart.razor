@page "/cart"
@inject ICartService CartService


    <h3>Shopping Cart</h3>

@if (CartItems == null || CartItems.Count() <= 0)
{
    <span>You have no items in your cart.</span>
}

else
{
    <div>
        @foreach (var item in CartItems)
        {
        <div class="item-container">
            <div class="item-image-wrapper">
                <img src="@item.Image" class="item-image" />
            </div>
            <div class="item-name">
                <h5><a href="/product/@item.ProductId">@item.ProductTitle</a></h5>
                <span>@item.EditionName</span>
                <br/>
                <button class="btn-delete" @onclick="@(() => DeleteItem(item))">Delete</button>
            </div>      
        </div>
            <div class="item-price">
                € @item.Price
                <hr/>
            </div>
        }
        <div class="item-price">
            Total (@CartItems.Count): € @CartItems.Sum(c => c.Price)
        </div>
    </div>
}

@code {

    List<CartItem> CartItems = new List<CartItem>();

    protected async override Task OnInitializedAsync()
    {
        CartItems = await CartService.GetCartItemsAsync();
    }

    private async Task DeleteItem(CartItem item)
    {
        await CartService.DeleteItemAsync(item);
        CartItems = await CartService.GetCartItemsAsync();
    }
}
